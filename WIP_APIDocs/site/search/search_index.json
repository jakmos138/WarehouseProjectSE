{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. The API doc will be merged into the project.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. The API doc will be merged into the project.","title":"Project layout"},{"location":"api/","text":"Warehouse System REST API Request and response body syntax The syntax used for the response structure in this document is similar to JSON, but with types instead of values, for example: { key1: type1, key2: { subkey1: subtype1, subkey2: subtype2 }, key3: type3 } The possible types are: [type] Array of items of type type . type? Item of type type or null . bool true or false . int Integer. decimal Real number with precision given by digits to the right of the decimal point. decimal(n) decimal with fixed precision \u2013 n digits to the right of the decimal point. string String of characters. timestamp Timestamp. How the timestamp is passed is to be decided. object Generic object. Wherever possible, the full specification of the object is specified rather than object . URL parameters are specified like this in a given endpoint: /url/:param All URL parameters are int s that correspond to resource IDs. Request and response structure The response body is in JSON format. If, for example, the object's description is: { key1: int, key2: string } then the following JSON data could be received for that object: { \"key1\": 123, \"key2\": \"Hello from API Docs\" } The general form of the response body is: { error: string?, data: object? } The full specification of data varies between requests. data is not null if and only if a success status code other than 204 No Content is returned. error is not null if and only if a 4xx or 5xx status code is returned. The request body follows more complex rules: data can be sent as application/x-www-form-urlencoded , application/json or multipart/form-data . For endpoints that accept files, only multipart/form-data is accepted; the request body specification never contains nested objects; fields not in the specification are ignored. If, for example, the specification for a request body is: { key1: int, key2: string, key3: int? } then the request body is expected to have key1 , key2 , and optionally key3 fields. Not passing an optional field is interpreted the same as passing the field with value null . Of course, the types must match. When sending data as application/json , make sure to pass numbers, and not their string representations, for int and decimal types. Success responses The following success status codes are typically returned by endpoints with the given methods: 200 OK GET ; 201 Created POST - the response typically contains the ID of the created resource; 204 No Content PUT, DELETE Exceptions from this rule are specified per endpoint. Error responses The following error status codes are common for all (or most) endpoints with given request methods: 400 Bad Request POST, PUT - Request is malformed. Typically caused by type mismatch in URL parameters, request body, or missing required fields; 401 Unauthorized - User is not logged in; 403 Forbidden POST, PUT, DELETE - User is logged in, but does not have sufficient permissions to perform the operation. Required permissions are specified on each endpoint; 404 Not Found - URL is unrecognized; 404 Not Found GET, PUT, DELETE - For endpoints with URL parameters, requested resource does not exist; 409 Conflict POST, PUT - Adding or updating a resource would cause an invalid state of that resource. Typically caused by a unique constraint violation or an attempt to point a foreign key field (which typically ends with _id ) to a nonexistent resource; 500 Internal Server Error - Unexpected error during request processing. Let's hope there won't be many of those. Exceptions from this rule are specified per endpoint. List of endpoints POST /api/auth/signin Logs the user in. No effect if the user is already logged in. Request body username_or_email: string, password: string Response 204 No Content - Success. 401 Unauthorized - Failed login (invalid username, email or password). ??? - User was already logged in. DELETE /api/auth/signout Logs the user out. Response 204 No Content - Success. 401 Unauthorized - User was already logged out. GET /api/items Gets all item batches in the inventory. Response Data { items: [{ item_index: int, item_type: { item_id: int, name: string, description: string, price: decimal(2), restricted_level: int }, location: { location_id: int, name: string, description: string, restricted_level: int }, details: string, quantity: decimal(4), restricted_level: int }] } POST /api/items Adds an item batch to the inventory. Required Permissions Create Items permission. Cannot set a restricted_level for higher access than the user's own permission_level . Request Body item_id: int, location_id: int, details: string, quantity: decimal(4), restricted_level: int item_id refers the item type. location_id refers to the location. Response Data { item_index: int } item_index is the ID of the newly created item. GET /api/items/:item_index Gets a specific item batch. Response Data { item_index: int, item_type: { item_id: int, name: string, description: string, price: decimal(2), restricted_level: int }, location: { location_id: int, name: string, description: string, restricted_level: int }, details: string, quantity: decimal(4), restricted_level: int } PUT /api/items/:item_index Edits a specific item batch. Cannot change the batch's item type. Required Permissions Edit Items permission. Cannot edit an item batch with a restricted_level for higher access than the user's own permission_level . Cannot set a restricted_level for higher access than the user's own permission_level . Request Body location_id: int, details: string, quantity: decimal(4), restricted_level: int item_id refers the item type. location_id refers to the location. DELETE /api/items/:item_index Delete a specific item batch. Cannot change the batch's item type. Required Permissions Delete Items permission. Cannot delete an item batch with a restricted_level for higher access than the user's own permission_level . GET /api/itemtypes Gets all defined item types. Response Data { item_types: [{ item_id: int, name: string, description: string, price: decimal(2), restricted_level: int }] } POST /api/itemtypes Defines an item type. Required Permissions Create Item Types permission. Cannot set a restricted_level for higher access than the user's own permission_level . Request Body name: string, description: string, price: decimal(2), restricted_level: int Response Data { item_id: int } item_id is the ID of the newly defined item type. GET /api/itemtypes/:item_id Gets a specific item type. Response Data { item_id: int, name: string, description: string, price: decimal(2), restricted_level: int } PUT /api/itemtypes/:item_id Edits a specific item type. Required Permissions Edit Item Types permission. Cannot edit an item type with a restricted_level for higher access than the user's own permission_level . Cannot set a restricted_level for higher access than the user's own permission_level . Request Body name: string, description: string, price: decimal(2), restricted_level: int DELETE /api/itemtypes/:item_id Delete a specific item type. What happens if there are still items of the type in the inventory? Required Permissions Delete Item Types permission. Cannot delete an item type with a restricted_level for higher access than the user's own permission_level . GET /api/locations Gets all locations. Response Data { locations: [{ location_id: int, name: string, description: string, restricted_level: int }] } POST /api/locations Creates a location. Required Permissions Create Locations permission. Cannot set a restricted_level for higher access than the user's own permission_level . Request Body name: string, description: string, restricted_level: int Response Data { location_id: int } location_id is the ID of the newly created location. GET /api/locations/:location_id Gets a specific location. Response Data { location_id: int, name: string, description: string, restricted_level: int } PUT /api/locations/:location_id Edits a specific location. Required Permissions Edit Locations permission. Cannot edit a location with a restricted_level for higher access than the user's own permission_level . Cannot set a restricted_level for higher access than the user's own permission_level . Request Body name: string, description: string, restricted_level: int DELETE /api/locations/:location_id Delete a specific location. What happens if there are still items in that location? Required Permissions Delete Locations permission. Cannot delete an item type with a restricted_level for higher access than the user's own permission_level .","title":"API"},{"location":"api/#warehouse-system-rest-api","text":"","title":"Warehouse System REST API"},{"location":"api/#request-and-response-body-syntax","text":"The syntax used for the response structure in this document is similar to JSON, but with types instead of values, for example: { key1: type1, key2: { subkey1: subtype1, subkey2: subtype2 }, key3: type3 } The possible types are:","title":"Request and response body syntax"},{"location":"api/#type","text":"Array of items of type type .","title":"[type]"},{"location":"api/#type_1","text":"Item of type type or null .","title":"type?"},{"location":"api/#bool","text":"true or false .","title":"bool"},{"location":"api/#int","text":"Integer.","title":"int"},{"location":"api/#decimal","text":"Real number with precision given by digits to the right of the decimal point.","title":"decimal"},{"location":"api/#decimaln","text":"decimal with fixed precision \u2013 n digits to the right of the decimal point.","title":"decimal(n)"},{"location":"api/#string","text":"String of characters.","title":"string"},{"location":"api/#timestamp","text":"Timestamp. How the timestamp is passed is to be decided.","title":"timestamp"},{"location":"api/#object","text":"Generic object. Wherever possible, the full specification of the object is specified rather than object . URL parameters are specified like this in a given endpoint: /url/:param All URL parameters are int s that correspond to resource IDs.","title":"object"},{"location":"api/#request-and-response-structure","text":"The response body is in JSON format. If, for example, the object's description is: { key1: int, key2: string } then the following JSON data could be received for that object: { \"key1\": 123, \"key2\": \"Hello from API Docs\" } The general form of the response body is: { error: string?, data: object? } The full specification of data varies between requests. data is not null if and only if a success status code other than 204 No Content is returned. error is not null if and only if a 4xx or 5xx status code is returned. The request body follows more complex rules: data can be sent as application/x-www-form-urlencoded , application/json or multipart/form-data . For endpoints that accept files, only multipart/form-data is accepted; the request body specification never contains nested objects; fields not in the specification are ignored. If, for example, the specification for a request body is: { key1: int, key2: string, key3: int? } then the request body is expected to have key1 , key2 , and optionally key3 fields. Not passing an optional field is interpreted the same as passing the field with value null . Of course, the types must match. When sending data as application/json , make sure to pass numbers, and not their string representations, for int and decimal types.","title":"Request and response structure"},{"location":"api/#success-responses","text":"The following success status codes are typically returned by endpoints with the given methods: 200 OK GET ; 201 Created POST - the response typically contains the ID of the created resource; 204 No Content PUT, DELETE Exceptions from this rule are specified per endpoint.","title":"Success responses"},{"location":"api/#error-responses","text":"The following error status codes are common for all (or most) endpoints with given request methods: 400 Bad Request POST, PUT - Request is malformed. Typically caused by type mismatch in URL parameters, request body, or missing required fields; 401 Unauthorized - User is not logged in; 403 Forbidden POST, PUT, DELETE - User is logged in, but does not have sufficient permissions to perform the operation. Required permissions are specified on each endpoint; 404 Not Found - URL is unrecognized; 404 Not Found GET, PUT, DELETE - For endpoints with URL parameters, requested resource does not exist; 409 Conflict POST, PUT - Adding or updating a resource would cause an invalid state of that resource. Typically caused by a unique constraint violation or an attempt to point a foreign key field (which typically ends with _id ) to a nonexistent resource; 500 Internal Server Error - Unexpected error during request processing. Let's hope there won't be many of those. Exceptions from this rule are specified per endpoint.","title":"Error responses"},{"location":"api/#list-of-endpoints","text":"","title":"List of endpoints"},{"location":"api/#post-apiauthsignin","text":"Logs the user in. No effect if the user is already logged in. Request body username_or_email: string, password: string Response 204 No Content - Success. 401 Unauthorized - Failed login (invalid username, email or password). ??? - User was already logged in.","title":"POST /api/auth/signin"},{"location":"api/#delete-apiauthsignout","text":"Logs the user out. Response 204 No Content - Success. 401 Unauthorized - User was already logged out.","title":"DELETE /api/auth/signout"},{"location":"api/#get-apiitems","text":"Gets all item batches in the inventory. Response Data { items: [{ item_index: int, item_type: { item_id: int, name: string, description: string, price: decimal(2), restricted_level: int }, location: { location_id: int, name: string, description: string, restricted_level: int }, details: string, quantity: decimal(4), restricted_level: int }] }","title":"GET /api/items"},{"location":"api/#post-apiitems","text":"Adds an item batch to the inventory. Required Permissions Create Items permission. Cannot set a restricted_level for higher access than the user's own permission_level . Request Body item_id: int, location_id: int, details: string, quantity: decimal(4), restricted_level: int item_id refers the item type. location_id refers to the location. Response Data { item_index: int } item_index is the ID of the newly created item.","title":"POST /api/items"},{"location":"api/#get-apiitemsitem_index","text":"Gets a specific item batch. Response Data { item_index: int, item_type: { item_id: int, name: string, description: string, price: decimal(2), restricted_level: int }, location: { location_id: int, name: string, description: string, restricted_level: int }, details: string, quantity: decimal(4), restricted_level: int }","title":"GET /api/items/:item_index"},{"location":"api/#put-apiitemsitem_index","text":"Edits a specific item batch. Cannot change the batch's item type. Required Permissions Edit Items permission. Cannot edit an item batch with a restricted_level for higher access than the user's own permission_level . Cannot set a restricted_level for higher access than the user's own permission_level . Request Body location_id: int, details: string, quantity: decimal(4), restricted_level: int item_id refers the item type. location_id refers to the location.","title":"PUT /api/items/:item_index"},{"location":"api/#delete-apiitemsitem_index","text":"Delete a specific item batch. Cannot change the batch's item type. Required Permissions Delete Items permission. Cannot delete an item batch with a restricted_level for higher access than the user's own permission_level .","title":"DELETE /api/items/:item_index"},{"location":"api/#get-apiitemtypes","text":"Gets all defined item types. Response Data { item_types: [{ item_id: int, name: string, description: string, price: decimal(2), restricted_level: int }] }","title":"GET /api/itemtypes"},{"location":"api/#post-apiitemtypes","text":"Defines an item type. Required Permissions Create Item Types permission. Cannot set a restricted_level for higher access than the user's own permission_level . Request Body name: string, description: string, price: decimal(2), restricted_level: int Response Data { item_id: int } item_id is the ID of the newly defined item type.","title":"POST /api/itemtypes"},{"location":"api/#get-apiitemtypesitem_id","text":"Gets a specific item type. Response Data { item_id: int, name: string, description: string, price: decimal(2), restricted_level: int }","title":"GET /api/itemtypes/:item_id"},{"location":"api/#put-apiitemtypesitem_id","text":"Edits a specific item type. Required Permissions Edit Item Types permission. Cannot edit an item type with a restricted_level for higher access than the user's own permission_level . Cannot set a restricted_level for higher access than the user's own permission_level . Request Body name: string, description: string, price: decimal(2), restricted_level: int","title":"PUT /api/itemtypes/:item_id"},{"location":"api/#delete-apiitemtypesitem_id","text":"Delete a specific item type. What happens if there are still items of the type in the inventory? Required Permissions Delete Item Types permission. Cannot delete an item type with a restricted_level for higher access than the user's own permission_level .","title":"DELETE /api/itemtypes/:item_id"},{"location":"api/#get-apilocations","text":"Gets all locations. Response Data { locations: [{ location_id: int, name: string, description: string, restricted_level: int }] }","title":"GET /api/locations"},{"location":"api/#post-apilocations","text":"Creates a location. Required Permissions Create Locations permission. Cannot set a restricted_level for higher access than the user's own permission_level . Request Body name: string, description: string, restricted_level: int Response Data { location_id: int } location_id is the ID of the newly created location.","title":"POST /api/locations"},{"location":"api/#get-apilocationslocation_id","text":"Gets a specific location. Response Data { location_id: int, name: string, description: string, restricted_level: int }","title":"GET /api/locations/:location_id"},{"location":"api/#put-apilocationslocation_id","text":"Edits a specific location. Required Permissions Edit Locations permission. Cannot edit a location with a restricted_level for higher access than the user's own permission_level . Cannot set a restricted_level for higher access than the user's own permission_level . Request Body name: string, description: string, restricted_level: int","title":"PUT /api/locations/:location_id"},{"location":"api/#delete-apilocationslocation_id","text":"Delete a specific location. What happens if there are still items in that location? Required Permissions Delete Locations permission. Cannot delete an item type with a restricted_level for higher access than the user's own permission_level .","title":"DELETE /api/locations/:location_id"},{"location":"db_jak/","text":"How to properly set up the SQL Server connection The following steps apply to connecting to a local instance of SQL Server (SQL Express). Use SQL Server Authentication The app does not support Windows Authentication for SQL Server, only SQL Server Authentication with a username and password. To create a user login in SQL Server, do the following in SQL Server Management Studio: In the Object Explorer, go to your SQL Server instance / Security / Logins , right click it and select New Login... For the new login, select SQL Server Authentication . Disable Enforce password policy . Go to the User Mapping tab, check the WarehouseSE database and the db_owner and public roles for that database. Enable TCP/IP and set up ports in SQL Server Open the SQL Server Manager, located in your Windows system folder Windows/System32/SQLServerManager##.msc , where ## corresponds to the SQL Server version. Go to SQL Server Network Configuration / Protocols for [SQL instance name] . Enable TCP/IP . Open the properties of TCP/IP , go to IP Addresses , and under IPAll clear TCP Dynamic Ports and set TCP Port to 1433. For the changes to take effect, restart SQL Server. This can be done in SQL Server Manager - SQL Server Services / SQL Server ([SQL instance name]) right click and select Restart . Make sure SQL Server Browser is running While in the SQL Server Manager, we can also check if SQL Server Browser is running - it is required for the Node.js module to connect, otherwise the connection will time out on app startup. If not, go to its properties. In the Service tab, set Start Mode to Automatic . In the Log On tab, start the service. Relevant .env variables DB_SERVER - full name of the SQL server instance, for example PC_NAME\\INSTANCE_NAME DB_PORT - port on which SQL Server is running, 1433 by default DB_NAME - name of the database schema - WarehouseSE DB_USER - login name for SQL Server Authentication DB_PWD - password for SQL Server Authentication","title":"DB Help"},{"location":"db_jak/#how-to-properly-set-up-the-sql-server-connection","text":"The following steps apply to connecting to a local instance of SQL Server (SQL Express).","title":"How to properly set up the SQL Server connection"},{"location":"db_jak/#use-sql-server-authentication","text":"The app does not support Windows Authentication for SQL Server, only SQL Server Authentication with a username and password. To create a user login in SQL Server, do the following in SQL Server Management Studio: In the Object Explorer, go to your SQL Server instance / Security / Logins , right click it and select New Login... For the new login, select SQL Server Authentication . Disable Enforce password policy . Go to the User Mapping tab, check the WarehouseSE database and the db_owner and public roles for that database.","title":"Use SQL Server Authentication"},{"location":"db_jak/#enable-tcpip-and-set-up-ports-in-sql-server","text":"Open the SQL Server Manager, located in your Windows system folder Windows/System32/SQLServerManager##.msc , where ## corresponds to the SQL Server version. Go to SQL Server Network Configuration / Protocols for [SQL instance name] . Enable TCP/IP . Open the properties of TCP/IP , go to IP Addresses , and under IPAll clear TCP Dynamic Ports and set TCP Port to 1433. For the changes to take effect, restart SQL Server. This can be done in SQL Server Manager - SQL Server Services / SQL Server ([SQL instance name]) right click and select Restart .","title":"Enable TCP/IP and set up ports in SQL Server"},{"location":"db_jak/#make-sure-sql-server-browser-is-running","text":"While in the SQL Server Manager, we can also check if SQL Server Browser is running - it is required for the Node.js module to connect, otherwise the connection will time out on app startup. If not, go to its properties. In the Service tab, set Start Mode to Automatic . In the Log On tab, start the service.","title":"Make sure SQL Server Browser is running"},{"location":"db_jak/#relevant-env-variables","text":"DB_SERVER - full name of the SQL server instance, for example PC_NAME\\INSTANCE_NAME DB_PORT - port on which SQL Server is running, 1433 by default DB_NAME - name of the database schema - WarehouseSE DB_USER - login name for SQL Server Authentication DB_PWD - password for SQL Server Authentication","title":"Relevant .env variables"}]}